const { Event } = require("../../models");
const { Markup } = require("telegraf");
const { sendInvoice } = require("../../helpers");
const { logger } = require("../../utils");

const callbackHandler = async (ctx) => {
  const callback = ctx.update.callback_query.data;
  const eventId = callback.replace("_register", "");
  const event = await Event.findById(eventId).exec();
  console.log(ctx.update.callback_query.message.message_id);
  if (/register/.test(callback)) {
    const alreadyRegistered = await Event.find({ _id: eventId, "participants.userId": ctx.from.id })
      .count()
      .exec();
    if (alreadyRegistered) {
      event.participants.pull({ userId: ctx.from.id });
      await event.save();
      ctx.answerCbQuery();
      ctx.replyWithMarkdown(`–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ "*${event.name}*"`);
      logger.info(`${ctx.from.username} (${ctx.from.id}) –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ "${event.name}"`);
    } else {
      const userFullName = `${ctx.from.first_name} ${ctx.from.last_name}`;
      event.participants.addToSet({ name: userFullName, userId: ctx.from.id });
      await event.save();
      ctx.answerCbQuery();
      ctx.replyWithMarkdown(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ "*${event.name}*"`);
      logger.info(`${ctx.from.username} (${ctx.from.id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ "${event.name}"`);
    }
    const registerButtonText = alreadyRegistered ? "ü§ò –ü–æ–π–¥—É" : "‚òπÔ∏è –ù–µ –ø–æ–π–¥—É";
    const buttonsPayload = [Markup.callbackButton(registerButtonText, `${event.id}_register`)];
    if (event.url) buttonsPayload.push(Markup.urlButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", event.url));
    ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttonsPayload));
  } else if (event) {
    if (event.price === 0) {
      logger.info(
        `${ctx.from.username} (${ctx.from.id}) —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ "${event.name}"`,
      );
      const alreadyRegistered = await Event.find({
        _id: eventId,
        "participants.userId": ctx.from.id,
      })
        .count()
        .exec();
      const registerButtonText = alreadyRegistered ? "‚òπÔ∏è –ù–µ –ø–æ–π–¥—É" : "ü§ò –ü–æ–π–¥—É";
      const buttonsPayload = [Markup.callbackButton(registerButtonText, `${event.id}_register`)];
      if (event.url) buttonsPayload.push(Markup.urlButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", event.url));
      ctx.replyWithMarkdown(
        `*${event.name}*\n\n${event.description}`,
        Markup.inlineKeyboard(buttonsPayload).extra(),
      );
    } else {
      await sendInvoice(ctx, event);
    }
  } else {
    logger.warn(
      `${ctx.from.username} (${ctx.from.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç –∑–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ`,
    );
    ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç.");
  }
};

module.exports = callbackHandler;
