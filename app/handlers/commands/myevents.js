const { Event } = require("../../models");
const { Markup } = require("telegraf");

const myEventsHandler = async (ctx) => {
  const userId = ctx.from.id;
  const events = await Event.find({ organizer: userId }).exec();
  let organizerEvents = "";
  if (!events.length) {
    organizerEvents = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è.";
  } else {
    organizerEvents = events.reduce(
      (acc, event) => `${acc}*${event.name}* (\`${event.id}\`)\n`,
      "*–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º:*\n\n",
    );
    organizerEvents.concat([
      "\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/show <id —Å–æ–±—ã—Ç–∏—è>`",
    ]);
  }
  const eventsButtons = events
    .map((event) => [Markup.callbackButton(event.name, `${event.id}_show`)])
    .concat([[Markup.callbackButton("–ú–µ–Ω—é üìã", "menu")]]);
  ctx.replyWithMarkdown(organizerEvents, Markup.inlineKeyboard(eventsButtons).extra());
};

module.exports = myEventsHandler;
