require("dotenv").config();
const Telegraf = require("telegraf");
const rateLimit = require("telegraf-ratelimit");
const express = require("express");
const moment = require("moment");
const logger = require("./utils/logger");
const Event = require("./models/Event");
const connectDB = require("./db/connection");
const { createInvoice, isAdmin, isJson } = require("./helpers");

const { Markup } = Telegraf;

const DEBUG = process.env.NODE_ENV !== "production";

moment.locale("ru");

const bot = new Telegraf(process.env.BOT_TOKEN);

const limitConfig = {
  window: 1000,
  limit: 1,
  onLimitExceeded: ({ reply }) => reply("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É"),
};

bot.use(rateLimit(limitConfig));

bot.use(async (ctx, next) => {
  const start = Date.now();
  await next();
  const ms = Date.now() - start;
  logger.info(`–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - ${ms} ms`);
});

bot.catch((err) => logger.error(`–û—à–∏–±–∫–∞ –±–æ—Ç–∞: ${err}`));

bot.use(async (ctx, next) => {
  if (ctx.message) {
    ctx.state.isAdmin = await isAdmin(ctx.message);
  }
  await next();
});

async function eventsToMessage(events) {
  return events.reduce((acc, event) => {
    const {
      description, startDate, price, name, maxParticipants, participants,
    } = event;
    const date = moment(startDate).format("D MMMM YY, HH:mm");
    const freePlaces = maxParticipants - participants.length;
    return `${acc}*${name}*\n${description}\n\nüìÜ ${date}\nüéü –£—á–∞—Å—Ç–∏–µ: ${price} ‚ÇΩ\nüë• –ú–µ—Å—Ç: ${freePlaces} –∏–∑ ${maxParticipants}\n\n`;
  }, "");
}

async function getEventsPayload() {
  const events = await Event.find({ startDate: { $gte: Date.now() } }).exec();
  events.sort((a, b) => a.startDate - b.startDate);
  const eventButtons = events
    .map((event) => [Markup.callbackButton(event.name, event.name)])
    .concat([[Markup.callbackButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "update_events")]]);
  const eventsMessage = (await eventsToMessage(events)) || "–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π üï∏";
  return [
    `*–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:*\n\n${eventsMessage}`,
    Markup.inlineKeyboard(eventButtons).extra({ parse_mode: "Markdown" }),
  ];
}

bot.start(async (ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É üôÇ",
    Markup.keyboard([
      [Markup.button("–¢–µ–∫—É—â–∏–µ üì¢"), Markup.button("–ú–æ–∏ üéü")],
      [Markup.button("–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ üìú")],
    ])
      .resize()
      .extra(),
  );
});

bot.hears("–¢–µ–∫—É—â–∏–µ üì¢", async ({ replyWithMarkdown }) =>
  replyWithMarkdown(...(await getEventsPayload())),
);

bot.hears("–ú–æ–∏ üéü", async (ctx) => {
  const userEvents = await Event.find({
    "participants.userId": ctx.from.id,
    startDate: { $gte: Date.now() },
  }).exec();
  const myEvents = userEvents.reduce((acc, event) => {
    const date = moment(event.startDate).format("D MMMM YY, HH:mm");
    return `${acc}*${event.name}* (${date})\n`;
  }, "");
  if (myEvents) {
    const replyPayload = `*–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞:*\n\n${myEvents}`;
    ctx.replyWithMarkdown(replyPayload);
  } else {
    ctx.reply("–í—ã –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ü§∑‚Äç‚ôÇÔ∏è");
  }
});

bot.hears("–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ üìú", async (ctx) => {
  const events = await Event.find({
    "participants.userId": ctx.from.id,
    startDate: { $lt: Date.now() },
  }).exec();
  const eventsPayload = events.reduce((acc, event) => {
    const date = moment(event.startDate).format("D MMMM YY, HH:mm");
    return `${acc}*${event.name}* (${date})\n`;
  }, "");
  if (eventsPayload) {
    const replyPayload = `*–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Å–æ–±—ã—Ç–∏—è:*\n\n${eventsPayload}`;
    ctx.replyWithMarkdown(replyPayload);
  } else {
    ctx.reply("–í—ã –Ω–µ –ø–æ—Å–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üôÅ");
  }
});

bot.command("add", async (ctx) => {
  if (!ctx.state.isAdmin) {
    logger.warn(`${ctx.from.username} (${ctx.from.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /remove`);
  } else {
    let payload = ctx.message.text.replace("/add ", "");
    logger.info(
      `${ctx.from.username} (${ctx.from.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /add —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${payload}`,
    );
    if (payload && isJson(payload)) {
      payload = JSON.parse(payload);
      const {
        name, description, price, maxParticipants, photoUrl, url,
      } = payload;
      let { startDate } = payload;
      startDate = moment(startDate);
      const eventPayload = {
        name,
        description,
        price,
        startDate,
        maxParticipants,
        photoUrl,
        url,
      };
      try {
        await Event.create(eventPayload);
        logger.info(`[ADMIN] ${ctx.from.username} (${ctx.from.id}) –¥–æ–±–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ "${name}"`);
        ctx.replyWithMarkdown(`–°–æ–±—ã—Ç–∏–µ *${name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
      } catch (err) {
        logger.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${err}`);
        ctx.reply("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.");
      }
    } else {
      const schema = `{
  "name": !String,
  "description": !String,
  "price": !Number (>=60),
  "startDate": !Date (YYYY-MM-DD HH:MM),
  "maxParticipants": !Number,
  "photoUrl": !String,
  "url": String
}`;
      ctx.replyWithMarkdown(
        `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /add {JSON —Å–æ–±—ã—Ç–∏—è}.\n\`${schema}\``,
      );
    }
  }
});

bot.command("/remove", async (ctx) => {
  if (!ctx.state.isAdmin) {
    logger.warn(`${ctx.from.username} (${ctx.from.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /remove`);
  } else {
    const eventName = ctx.message.text.replace("/remove ", "");
    logger.info(
      `[ADMIN] ${ctx.from.username} (${
        ctx.from.id
      }) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /remove —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "${eventName}"`,
    );
    try {
      const event = await Event.findOne({ name: eventName }).exec();
      if (event) {
        await event.remove();
        ctx.replyWithMarkdown(`–°–æ–±—ã—Ç–∏–µ *${eventName}* —É–¥–∞–ª–µ–Ω–æ.`);
        logger.info(`[ADMIN] ${ctx.from.username} (${ctx.from.id}) —É–¥–∞–ª–∏–ª —Å–æ–±—ã—Ç–∏–µ "${eventName}"`);
      } else {
        ctx.replyWithMarkdown(`–°–æ–±—ã—Ç–∏–µ *${eventName}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      }
    } catch (err) {
      logger.error(
        `${ctx.from.username} (${
          ctx.from.id
        }) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${eventName}" —Å –æ—à–∏–±–∫–æ–π: ${err}`,
      );
      ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.");
    }
  }
});

Event.find().then((events) => {
  events.forEach((event) => {
    const { name } = event;
    bot.action(name, async (ctx) => {
      logger.info(`${ctx.from.username} (${ctx.from.id}) —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ "${name}"`);
      try {
        await ctx.replyWithInvoice(createInvoice(event));
        logger.info(
          `–°—á–µ—Ç –¥–ª—è ${ctx.from.username} (${ctx.from.id}) –∑–∞ —Å–æ–±—ã—Ç–∏–µ "${name}" —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω`,
        );
      } catch (err) {
        logger.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${name}"`);
      }
    });
  });
});

bot.action("update_events", async (ctx) => {
  const [text, keyboard] = await getEventsPayload();
  try {
    await ctx.editMessageText(text, keyboard);
    await ctx.answerCbQuery("–°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  } catch (err) {
    if (err.code === 400) {
      await ctx.answerCbQuery("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    } else {
      logger.error(
        `${ctx.from.username} (${ctx.from.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –æ—à–∏–±–∫–æ–π: ${err}`,
      );
    }
  }
});

bot.on("pre_checkout_query", ({ answerPreCheckoutQuery }) => answerPreCheckoutQuery(true));

bot.on("successful_payment", async (ctx) => {
  const { name, email } = ctx.message.successful_payment.order_info;
  const event = await Event.findOne({
    name: JSON.parse(ctx.message.successful_payment.invoice_payload).name,
  }).exec();
  event.participants.addToSet({ name, email, userId: ctx.from.id });
  await event.save();
  logger.info(
    `$${ctx.from.username} (${ctx.from.id}) –∑–∞–ø–ª–∞—Ç–∏–ª ${ctx.message.successful_payment.total_amount /
      100} ‚ÇΩ.`,
  );
  logger.info(`–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: ${ctx.message.successful_payment.order_info}`);
  logger.info(
    `${ctx.from.username} (${ctx.from.id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.name}"`,
  );
});

(async () => {
  try {
    await connectDB(process.env.DB_URL);
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ MongoDB");
    if (DEBUG) {
      bot.startPolling();
    } else {
      const app = express();
      app.use(bot.webhookCallback("/hgQbAWfe"));
      bot.telegram.setWebhook("https://xdnews-bot.xadev.ru:443/hgQbAWfe");
      app.listen(3000, () => {
        logger.info("–ó–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000");
      });
    }
    const botInfo = await bot.telegram.getMe();
    bot.options.username = botInfo.username;
    logger.info(`–ë–æ—Ç ${bot.options.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);
  } catch (err) {
    logger.log(`–í–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${err}`);
  }
})();
